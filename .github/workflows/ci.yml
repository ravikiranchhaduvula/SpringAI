name: ci

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  id-token: write      # needed for AWS OIDC
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ECR_REPO: myapp-web
  IMAGE_TAG: ${{ github.sha }}

jobs:
  backend:
    name: Build (Gradle + pgvector)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: aistore
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/aistore
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          OPENAI_API_KEY: dummy
        ports:
          - 5432:5432
        # give DB a moment to be ready
        options: >-
          --health-cmd="pg_isready -U postgres -d aistore"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/aistore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Gradle build (no tests failing the build yet)
        run: ./gradlew --no-daemon clean build -x test

      - name: Run unit tests
        run: ./gradlew --no-daemon test

      - name: Upload JAR artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  k6_smoke:
    name: k6 light smoke (~2 req/min)
    runs-on: ubuntu-latest
    needs: backend
    if: ${{ vars.ENABLE_K6 == 'true' }}   # turn on by setting a repo variable ENABLE_K6=true
    timeout-minutes: 10

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: aistore
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d aistore"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/aistore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      BASE_URL: http://localhost:8080

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Download JAR from previous job
        uses: actions/download-artifact@v4
        with:
          name: app-jar
        # default path is ./app-jar; weâ€™ll relocate it next
      - name: Move JAR into build/libs (for local run layout)
        run: |
          mkdir -p build/libs
          mv app-jar/*.jar build/libs/

      - name: Verify JAR present
        run: ls -l build/libs

      - name: Start app in background
        run: |
          nohup java -jar build/libs/*.jar > app.log 2>&1 &
          echo $! > app.pid
          for i in {1..60}; do
            if curl -sSf http://localhost:8080/actuator/health >/dev/null; then
              echo "App is up."; break
            fi
            sleep 2
          done
          tail -n +1 app.log | sed -n '1,80p'

      - name: Install k6
        uses: grafana/setup-k6-action@v1
        with:
          version: v0.49.0

      - name: Write k6-light test file
        run: |
          mkdir -p perf
          cat > perf/k6-light.js <<'EOF'
          import http from "k6/http";
          import { check, sleep } from "k6";
          export const options = {
            vus: 1,
            duration: "60s",
            thresholds: {
              http_req_failed: ["rate<0.05"],
              http_req_duration: ["p(95)<2000"],
            },
          };
          const payloads = [
            { q: "How can I reduce p95 latency?" },
            { q: "Place a hold on invoice INV-2002 for $45.00" },
          ];
          export default function () {
            const idx = __ITER % payloads.length;
            const res = http.post(
              `${__ENV.BASE_URL || "http://localhost:8080"}/ai/route`,
              JSON.stringify(payloads[idx]),
              { headers: { "Content-Type": "application/json" } }
            );
            check(res, {
              "status 200": (r) => r.status === 200,
              "json": (r) => (r.headers["Content-Type"] || "").includes("application/json"),
            });
            sleep(30); // ~2 req/min
          }
          EOF

      - name: Run k6 light
        run: k6 run perf/k6-light.js

      - name: Show app logs on failure
        if: failure()
        run: |
          echo "=== app.log (tail) ==="
          tail -n 200 app.log
          echo "=== app still running? ==="
          ps -ef | grep java || true

      - name: Stop app
        if: always()
        run: |
          if [ -f app.pid ]; then kill $(cat app.pid) || true; fi

  ecr_build_and_push:
    name: Build & Push image to ECR
    runs-on: ubuntu-latest
    needs: backend
    # only push images on push events to main/master (not on PRs)
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # pull the JAR from the backend job so Dockerfile can COPY it (if applicable)
      - name: Download JAR artifact (optional but handy)
        uses: actions/download-artifact@v4
        with:
          name: app-jar
        continue-on-error: true
      - name: Place JAR in build/libs (if present)
        run: |
          if ls app-jar/*.jar >/dev/null 2>&1; then
            mkdir -p build/libs
            mv app-jar/*.jar build/libs/
          else
            echo "No JAR artifact found; proceeding with Dockerfile as-is."
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::988360983746:role/GHA_OIDC_ECR_Pusher

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG

      - name: Push image
        run: |
          docker push ${{ steps.ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG

      - name: Save image URI artifact (for Jenkins/Ansible later)
        run: echo "${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}" > image_uri.txt

      - name: Upload image URI
        uses: actions/upload-artifact@v4
        with:
          name: image_uri
          path: image_uri.txt
